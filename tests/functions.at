# Checking the functions.                    -*- Autotest -*-

# Copyright (C) 2002, 2003  Free Software Foundation, Inc.
#
# This file is part of GNU libmatheval
#
# GNU libmatheval is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2, or (at
# your option) any later version.
#
# GNU libmatheval is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with program; see the file COPYING. If not, write to the Free
# Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.

AT_BANNER([[Checking evaluating functions.]])

AT_SETUP([Check functions.])

AT_DATA([function.scm],
[[
(define f (evaluator-create "exp(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [2.71828182845905], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "exp(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [exp(x)], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "ln(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [0.0], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "ln(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [(1/x)], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "sqrt(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [1.0], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "sqrt(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [(1/(2*sqrt(x)))], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "sin(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [0.841470984807897], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "sin(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [cos(x)], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "cos(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [0.54030230586814], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "cos(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [(-sin(x))], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "tg(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [1.5574077246549], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "tg(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [(1/(cos(x)^2))], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "ctg(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [0.642092615934331], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "ctg(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [(-(1/(sin(x)^2)))], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "arcsin(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [1.5707963267949], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "arcsin(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [(1/sqrt((1-(x^2))))], [ignore])
AT_DATA([function.scm],
[[
(define f (evaluator-create "arccos(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [0.0], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "arccos(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [(-(1/sqrt((1-(x^2)))))], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "arctg(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [0.785398163397448], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "arctg(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [(1/(1+(x^2)))], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "arcctg(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [0.785398163397448], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "arcctg(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [(-(1/(1+(x^2))))], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "sh(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [1.1752011936438], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "sh(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [ch(x)], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "ch(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [1.54308063481524], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "ch(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [sh(x)], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "th(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [0.761594155955765], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "th(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [(1/(ch(x)^2))], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "cth(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [1.31303528549933], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "cth(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [(-(1/(sh(x)^2)))], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "arsh(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [0.881373587019543], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "arsh(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [(1/sqrt((1-(x^2))))], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "arch(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [0.0], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "arch(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [(1/sqrt(((x^2)-1)))], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "arth(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [+#.#], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "arth(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [(1/(1-(x^2)))], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "arcth(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [+#.#], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "arcth(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [(1/((x^2)-1))], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "abs(x)"))
(display (evaluator-evaluate-x f 1))
]])

AT_CHECK([matheval.sh function.scm], [ignore], [1.0], [ignore])

AT_DATA([function.scm],
[[
(define f (evaluator-create "abs(x)"))
(define f_prim (evaluator-derivative-x f))
(define string (make-string (evaluator-calculate-length f_prim)))
(evaluator-write f_prim string)
(display string)
]])

AT_CHECK([matheval.sh function.scm], [ignore], [(x/sqrt((x^2)))], [ignore])

AT_CLEANUP
